{% extends 'base.html.twig' %}
{% block body %}
<div class="container my-5">
    <div class="row">
        <div class="col">
            <h1>Abstract Factory Pattern</h1>
            <p>
                In this example I am building an Abstract Factory Pattern.
            </p>
            <p>
                You will see that the code is using a custom service to generate random objects. The service itself is injected with a factory. It is agnostic of what type of factory it is and what object it will generate.
                It only knows how it can create the objects and what methods the factory has, thanks to the abstract factory it is implementing.
            </p>
        </div>
    </div>
</div>
<div class="container">
    <div class="row row-cols-1 g-5">
        <div class="col">
            <h2>Factory A <small class="text-muted">Its elements will end with an A</small></h2>
            {% for i in 0..9 %}
                <code>{{ getClass(generatorA.generate) }}</code><br />
            {% endfor %}
        </div>
        <div class="col">
            <h2>Factory B <small class="text-muted">Its elements will end with a B</small></h2>
            {% for i in 0..9 %}
                <code>{{ getClass(generatorB.generate) }}</code><br />
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}