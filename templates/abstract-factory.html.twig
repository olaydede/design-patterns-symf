{% extends 'base.html.twig' %}
{% block body %}
<div class="container my-5">
    <div class="row">
        <div class="col">
            <h1>Abstract Factory Pattern</h1>
            <p>
                This is an example of an Abstract Factory Pattern.
            </p>
            <p>
                The Abstract Factory Pattern is often times confused with the Factory Method Pattern in that they are both creational patterns and both entail factories.<br />
                However, both patterns are different from one another and will behave differently.
            </p>
            <p>
                An abstract factory is an object that has multiple factory methods on it. It is used to create a family of classes. Maybe the easiest to remember use-case for it is when creating a UI element in some mobile frameworks.
                When building the UI, you will be handed a factory by your context. Your code will be asking the factory to create buttons, menus, form elements etc.
                However, your code will not be aware of what kind of factory it received. Your context might have passed and Android UI factory or an iOS UI factory.
                Your code will not know if it is creating an Android button or an iOS button. All it knows is that it is creating an abstract button.
            </p>
            <p>
                You will see that the code is using a custom service to generate random objects. The service itself is injected with a factory. It is agnostic of what type of factory it is and what object it will generate.
                It only knows how it can create the objects and what methods the factory has, thanks to the abstract factory it is implementing.
            </p>
        </div>
    </div>
</div>
<div class="container">
    <div class="row row-cols-1 g-5">
        <div class="col">
            <h2>Factory A <small class="text-muted">Its elements will end with an A</small></h2>
            {% for i in 0..9 %}
                <code>{{ getClass(generatorA.generate) }}</code><br />
            {% endfor %}
        </div>
        <div class="col">
            <h2>Factory B <small class="text-muted">Its elements will end with a B</small></h2>
            {% for i in 0..9 %}
                <code>{{ getClass(generatorB.generate) }}</code><br />
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}